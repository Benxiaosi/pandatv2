package com.example.pandatv.been;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEEN".
*/
public class UserBeenDao extends AbstractDao<UserBeen, Long> {

    public static final String TABLENAME = "USER_BEEN";

    /**
     * Properties of entity UserBeen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserImg = new Property(2, int.class, "userImg", false, "USER_IMG");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property YouXiang = new Property(4, String.class, "youXiang", false, "YOU_XIANG");
        public final static Property Qq = new Property(5, String.class, "qq", false, "QQ");
        public final static Property WeiXin = new Property(6, String.class, "weiXin", false, "WEI_XIN");
        public final static Property XinLang = new Property(7, String.class, "xinLang", false, "XIN_LANG");
    }


    public UserBeenDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_IMG\" INTEGER NOT NULL ," + // 2: userImg
                "\"PHONE\" TEXT," + // 3: phone
                "\"YOU_XIANG\" TEXT," + // 4: youXiang
                "\"QQ\" TEXT," + // 5: qq
                "\"WEI_XIN\" TEXT," + // 6: weiXin
                "\"XIN_LANG\" TEXT);"); // 7: xinLang
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBeen entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getUserImg());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String youXiang = entity.getYouXiang();
        if (youXiang != null) {
            stmt.bindString(5, youXiang);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(6, qq);
        }
 
        String weiXin = entity.getWeiXin();
        if (weiXin != null) {
            stmt.bindString(7, weiXin);
        }
 
        String xinLang = entity.getXinLang();
        if (xinLang != null) {
            stmt.bindString(8, xinLang);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBeen entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getUserImg());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String youXiang = entity.getYouXiang();
        if (youXiang != null) {
            stmt.bindString(5, youXiang);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(6, qq);
        }
 
        String weiXin = entity.getWeiXin();
        if (weiXin != null) {
            stmt.bindString(7, weiXin);
        }
 
        String xinLang = entity.getXinLang();
        if (xinLang != null) {
            stmt.bindString(8, xinLang);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBeen readEntity(Cursor cursor, int offset) {
        UserBeen entity = new UserBeen( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.getInt(offset + 2), // userImg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // youXiang
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // qq
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // weiXin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // xinLang
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBeen entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserImg(cursor.getInt(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYouXiang(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQq(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeiXin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setXinLang(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBeen entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBeen entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBeen entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
